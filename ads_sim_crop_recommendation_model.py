# -*- coding: utf-8 -*-
"""ADS SIM Crop Recommendation Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S4CfuOO_y3WrIR7PsiofJTCg_AMZN6_0
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score, classification_report
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')
# load integrated dataset
filename = "/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/integrated_okra_data.csv"
data = pd.read_csv(filename)

print(data.dtypes)

# extract features from 'Planting Date', 'Harvest Date', and 'Date'
data['Planting Date'] = pd.to_datetime(data['Planting Date'])
data['Harvest Date'] = pd.to_datetime(data['Harvest Date'])
data['Date'] = pd.to_datetime(data['Date'])  # If this column is relevant

# extract additional date features
data['Planting Day of Week'] = data['Planting Date'].dt.dayofweek
data['Harvest Day of Week'] = data['Harvest Date'].dt.dayofweek
data['Day of Week'] = data['Date'].dt.dayofweek

# drop original date columns
data.drop(['Planting Date', 'Harvest Date', 'Date'], axis=1, inplace=True)


# drop original 'Nutrient Uptake' column
data.drop(['Nutrient Uptake'], axis=1, inplace=True)

# one-hot encode categorical variables
categorical_columns = ['Soil Type', 'Growth Stage', 'Pest/Disease Incidence', 'Weather Data Correlation']
one_hot_encoder = OneHotEncoder(sparse=False)
encoded_categorical_data = one_hot_encoder.fit_transform(data[categorical_columns])

# create a DataFrame from encoded data
encoded_categorical_df = pd.DataFrame(encoded_categorical_data, columns=one_hot_encoder.get_feature_names_out(categorical_columns))

# define features and target variable
X = pd.concat([data.drop(categorical_columns, axis=1), encoded_categorical_df], axis=1)
y = data['Variety']  # Assuming 'Variety' is your target variable for crop recommendation

# drop irrelevant columns including target
X = X.drop(['Variety', 'Yield (kg/ha)'], axis=1)  # exclude target and yield

# split data into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# initialize classifiers
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
gb_classifier = GradientBoostingClassifier(n_estimators=100, random_state=42)

# fit classifiers
rf_classifier.fit(X_train, y_train)
gb_classifier.fit(X_train, y_train)

# predictions
rf_predictions = rf_classifier.predict(X_test)
gb_predictions = gb_classifier.predict(X_test)

# evaluate classifiers
print("Random Forest Classifier Report:\n", classification_report(y_test, rf_predictions))
print("Gradient Boosting Classifier Report:\n", classification_report(y_test, gb_predictions))

# perform cross-validation
rf_cv_scores = cross_val_score(rf_classifier, X, y, cv=5)
gb_cv_scores = cross_val_score(gb_classifier, X, y, cv=5)

print("Random Forest Cross-Validation Scores:", rf_cv_scores)
print("Gradient Boosting Cross-Validation Scores:", gb_cv_scores)