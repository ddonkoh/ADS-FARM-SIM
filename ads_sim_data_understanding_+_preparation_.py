# -*- coding: utf-8 -*-
"""ADS SIM Data Understanding + Preparation .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKV83yr1bGp353JUswCZcEA5jjcL26v8
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""#   Load Datasets"""

from google.colab import drive
drive.mount('/content/drive')

# import soil & weather data
soil_data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_soil_data (2).csv")
weather_data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/Ghana_Weather_Data (1).csv")

# import crop management data
crop_management_data = {}
with pd.ExcelFile('/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_okra_crop_management_data.xlsx') as xls:
    for sheet_name in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name)
        crop_management_data[sheet_name] = df
        print(f"Loaded data for soil type: {sheet_name}, shape: {df.shape}")

# import growth & yield data for okra varieties
okra_varieties = ["Agbagoma","Asha","Asontem","Asutem","Balabi", "Clemson Spineless", "Labadi Dwarf", "Lady’s Finger", "Penkrumah", "Quim Bombo", "Sengavi"]
okra_yield_data = {}
for variety in okra_varieties:
    file_path = f"/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_okra_{variety}_data.xlsx"
    okra_yield_data[variety] = pd.read_excel(file_path)
    print(f"Loaded yield data for {variety}, shape: {okra_yield_data[variety].shape}")

"""# Data Exploration"""

# BASIC OVERVIEW OF EACH DATASET

print("Soil Data Overview:")
print(soil_data.describe()) # soil data summary
print("\n")

print("Weather Data Overview:")
print(weather_data.describe())  # weather data summary
print("\n")

print("Crop Management Data Overview:")
for sheet_name, data in crop_management_data.items():
    print(f"{sheet_name} Overview:\n", data.describe()) # crop management data summary
    print("\n")

for variety, data in okra_yield_data.items():
    print(f"{variety} Yield Data Overview:\n", data.describe()) # crop yield & growth data summary
    print("\n")



# COLUMN NAMES AND DTYPE FOR ALL IMPORTED DATA

print("Soil Data Column Types:")
print(soil_data.dtypes)
print("\n")

print("Weather Data Column Types:")
print(weather_data.dtypes)
print("\n")

print("Crop Management Data Column Types:")
for sheet_name, data in crop_management_data.items():
    print(f"{sheet_name} Column Types:\n", data.dtypes)
    print("\n")

for variety, data in okra_yield_data.items():
    print(f"{variety} Yield Data Column Types:\n", data.dtypes)
    print("\n")

# MISSING VALUES IN EACH DATASET

print("Missing Values in Soil Data:")
print(soil_data.isnull().sum()) # missing values in soil data
print("\n")

# Missing Values in Weather Data
print("Missing Values in Weather Data:")
print(weather_data.isnull().sum())  # missing values in weather data
print("\n")

# Missing Values in Crop Management Data
print("Missing Values in Crop Management Data:")
for sheet_name, data in crop_management_data.items():
    print(f"Missing Values in {sheet_name}:\n", data.isnull().sum())  # missing values in crop management data
    print("\n")

# Missing Values in Okra Varieties Yield Data
for variety, data in okra_yield_data.items():
    print(f"Missing Values in {variety} Yield Data:\n", data.isnull().sum())  # missing values in crop growth & yield data
    print("\n")

# VISUALIZATION, CORRELATION, HANDLING OUTLIERS



sns.boxplot(x=soil_data['Soil pH (pH)'])
plt.title('Boxplot of Soil pH') # boxplot for soil pH
plt.show()

soil_ph_summary = soil_data['Soil pH (pH)'].describe()
print("Summary for Soil pH (pH):")
print(soil_ph_summary)  # summary
print("\n")

sns.boxplot(x=weather_data['Max Temperature (°C)'])
plt.title('Boxplot of Max Temperature') # boxplot for 'Max Temperature (°C)'
plt.show()

max_temp_summary = weather_data['Max Temperature (°C)'].describe()
print("Summary for Max Temperature (°C):")
print(max_temp_summary) # summary
print("\n")

sns.boxplot(x=okra_yield_data['Agbagoma']['Yield (kg/ha)'])
plt.title('Boxplot of Yield for Agbagoma Variety')  # boxplot for 'Yield (kg/ha)'
plt.show()

for variety, data in okra_yield_data.items():
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=data['Yield (kg/ha)'])
    plt.title(f'Boxplot of Yield for {variety} Variety')
    plt.show()

    yield_summary = data['Yield (kg/ha)'].describe()
    print(f"Summary for Yield (kg/ha) for {variety} Variety:")
    print(yield_summary)
    print("\n")



# crop management data has categorical columns so boxplot not applicable

# stacked bar plot for 'Irrigation Schedule' across soil types
irrigation_data = {}
for soil_type, data in crop_management_data.items():
    irrigation_data[soil_type] = data['Irrigation Schedule'].value_counts()

irrigation_df = pd.DataFrame(irrigation_data) # convert to DataFrame for easy plotting

irrigation_df.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.title('Irrigation Schedule across Soil Types')
plt.xlabel('Irrigation Schedule')
plt.ylabel('Count')
plt.show()

# summary of total counts for each irrigation schedule across all soil types
total_counts_by_schedule = irrigation_df.sum(axis=1)
print("Total Counts for Each Irrigation Schedule Across All Soil Types:")
print(total_counts_by_schedule)
print("\n")

# summary of distribution of each irrigation schedule within each soil type
distribution_by_soil_type = irrigation_df.apply(lambda x: x / x.sum(), axis=1)
print("Distribution of Each Irrigation Schedule Within Each Soil Type:")
print(distribution_by_soil_type)



# bar plot for each soil type (planting date count)
for soil_type, data in crop_management_data.items():
    # plot
    plt.figure(figsize=(12, 6))
    sns.countplot(x='Planting Date', hue='Variety', data=data, palette='Set2')
    plt.title(f'Distribution of Planting Dates for Varieties in {soil_type}')
    plt.xticks(rotation=45)
    plt.legend(title='Variety')
    plt.show()

    # summary
    planting_date_summary = data.groupby(['Planting Date', 'Variety']).size().unstack(fill_value=0)
    print(f"Planting Date Summary for {soil_type}:")
    print(planting_date_summary)
    print("\n")

# bar plot for each soil type (harvest date count)
for soil_type, data in crop_management_data.items():
    # plot
    plt.figure(figsize=(12, 6))
    sns.countplot(x='Harvest Date', hue='Variety', data=data, palette='Set3')
    plt.title(f'Distribution of Harvest Dates for Varieties in {soil_type}')
    plt.xticks(rotation=45)
    plt.legend(title='Variety')
    plt.show()

    # summary
    harvest_date_summary = data.groupby(['Harvest Date', 'Variety']).size().unstack(fill_value=0)
    print(f"Harvest Date Summary for {soil_type}:")
    print(harvest_date_summary)
    print("\n")



# list of combinations for heatmaps
combinations = [
    ('Variety', 'Fertilization Schedule'),
    ('Irrigation Schedule', 'Variety'),
    ('Pest Management', 'Variety'),
    ('Planting Date', 'Harvest Date'),
    ('Irrigation Schedule', 'Fertilization Schedule'),
    ('Pest Management', 'Fertilization Schedule')
]

# loop through each soil type + combination
for soil_type, data in crop_management_data.items():
    for (feature1, feature2) in combinations:
        # check if both features are in  dataset
        if feature1 in data.columns and feature2 in data.columns:
            # create a cross-tabulation of two features
            cross_tab_data = pd.crosstab(data[feature1], data[feature2])

            # plot heatmap
            plt.figure(figsize=(10, 8))
            sns.heatmap(cross_tab_data, annot=True, cmap='viridis')
            plt.title(f'{feature1} vs {feature2} in {soil_type}')
            plt.show()

            # print summary (cross-tabulation data)
            print(f"Summary of {feature1} vs {feature2} in {soil_type}:")
            print(cross_tab_data)
            print("\n")