# -*- coding: utf-8 -*-
"""ADS SIM Feature Engineering + Encoding + Integration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ANMBiD3aSFWZP1bN4keLI_gdp3lgcBd
"""

import pandas as pd
import numpy as np
from google.colab import drive

drive.mount('/content/drive')

# Import soil & weather data
soil_data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_soil_data (2).csv")
weather_data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/Ghana_Weather_Data (1).csv")

# Import crop management data
crop_management_data = {}
with pd.ExcelFile('/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_okra_crop_management_data.xlsx') as xls:
    for sheet_name in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name)
        crop_management_data[sheet_name] = df

# Import growth & yield data for okra varieties
okra_varieties = ["Agbagoma", "Asha", "Asontem", "Asutem", "Balabi", "Clemson Spineless", "Labadi Dwarf", "Lady’s Finger", "Penkrumah", "Quim Bombo", "Sengavi"]
okra_yield_data = {}
for variety in okra_varieties:
    file_path = f"/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_okra_{variety}_data.xlsx"
    okra_yield_data[variety] = pd.read_excel(file_path)

"""# Feature Engineering"""

for soil_type, data in crop_management_data.items():
    # convert dates to datetime
    data['Planting Date'] = pd.to_datetime(data['Planting Date'])
    data['Harvest Date'] = pd.to_datetime(data['Harvest Date'])

    # growing period is a time related feature
    data['Growing Period (days)'] = (data['Harvest Date'] - data['Planting Date']).dt.days

# weather Aggregates e.g. avg monthly temp
weather_data['Month'] = pd.to_datetime(weather_data['Month'], format='%B')
weather_data['Month'] = weather_data['Month'].dt.month
average_monthly_temp = weather_data.groupby('Month').agg({'Max Temperature (°C)': 'mean', 'Min Temperature (°C)': 'mean'}).reset_index()

# soil quality index e.g. weighted sum of soil properties
weights = {'Soil pH (pH)': 0.2, 'Organic Carbon (Mg C ha-1)': 0.2, 'Nitrogen (N) Content (%)': 0.2, 'Phosphorus (P) Content (%)': 0.2, 'Potassium (K) Content (%)': 0.2}
soil_data['Soil Quality Index'] = soil_data.apply(lambda x: sum([x[col] * weights[col] for col in weights]), axis=1)

# interaction features e.g. soil moisture vs avg rainfall
soil_data['Soil Moisture-Rainfall Interaction'] = soil_data['Soil Moisture Content (%)'] * weather_data['Average Rainfall (mm)'].mean()

print("Feature Engineering Completed")

# Display column names and data types for crop management data
print("Column Names and Data Types in Crop Management Data:")
for soil_type, data in crop_management_data.items():
    print(f"\n{soil_type} - Columns and Data Types:")
    print(data.dtypes)  # Print column names and data types

# Display column names and data types for weather data
print("\nColumn Names and Data Types in Weather Data:")
print(weather_data.dtypes)  # Print column names and data types of weather data

# Display column names and data types for soil data
print("\nColumn Names and Data Types in Soil Data:")
print(soil_data.dtypes)  # Print column names and data types of soil data

# display updated crop management data
print("Updated Crop Management Data:")
for soil_type, data in crop_management_data.items():
    print(f"\n{soil_type} - First Few Rows:")
    print(data.head())  # Show the first few rows of each soil type dataset

# display updated weather data
print("\nAverage Monthly Temperature:")
print(average_monthly_temp)  # Display the average monthly temperature data

# display updated soil data
print("\nUpdated Soil Data - First Few Rows:")
print(soil_data.head())  # Show the first few rows of the soil data with new features

"""# Encoding"""

# dictionary to encode the 'Pest/Disease Incidence' and 'Weather Data Correlation' categories in growth & yield datasets
category_encoding = {'Low': 1, 'Moderate': 2, 'High': 3}

for variety, data in okra_yield_data.items():
    # convert 'Date' to datetime
    data['Date'] = pd.to_datetime(data['Date'])

    # numerical encoding for 'Nutrient Uptake' (for N, P, K)
    # assume 'Nutrient Uptake' is a string representation of a dictionary
    data['Nutrient Uptake N'] = data['Nutrient Uptake'].apply(lambda x: eval(x)['N'])
    data['Nutrient Uptake P'] = data['Nutrient Uptake'].apply(lambda x: eval(x)['P'])
    data['Nutrient Uptake K'] = data['Nutrient Uptake'].apply(lambda x: eval(x)['K'])

    # encode 'Pest/Disease Incidence' and 'Weather Data Correlation'
    data['Pest/Disease Incidence Encoded'] = data['Pest/Disease Incidence'].map(category_encoding)
    data['Weather Data Correlation Encoded'] = data['Weather Data Correlation'].map(category_encoding)

    # create a feature for the rate of change in 'Leaf Area Index (LAI)' over different growth stages
    data['LAI Rate of Change'] = data['Leaf Area Index (LAI)'].diff() / data['Date'].diff().dt.days
    data['LAI Rate of Change'] = data['LAI Rate of Change'].fillna(0)  # Handle NaN values created by diff()

    # Update the dictionary with the modified DataFrame
    okra_yield_data[variety] = data

# check transformation for one variety (example: 'Sengavi')
print(okra_yield_data['Sengavi'].head())

# one-hot encoding for crop management data
for soil_type, data in crop_management_data.items():
    # apply directly to the DataFrame in the dictionary
    # Note: Columns with only one unique value ('Irrigation Schedule', 'Fertilization Schedule', and 'Pest Management') will be dropped after encoding  using drop_first=True,
    # as they do not add variability useful for modeling.
    crop_management_data[soil_type] = pd.get_dummies(data, columns=['Irrigation Schedule', 'Fertilization Schedule', 'Pest Management'], drop_first=True)

    # Print to check the transformation immediately after encoding
    print(f"\n{soil_type} - Column Names Immediately After Encoding:")
    print(crop_management_data[soil_type].columns.tolist())

# date encoding for crop management data
for soil_type, data in crop_management_data.items():


    # Extract month/day of year from 'Planting Date' and 'Harvest Date'
    data['Planting Month'] = data['Planting Date'].dt.month
    data['Harvest Month'] = data['Harvest Date'].dt.month
    data['Planting Day of Year'] = data['Planting Date'].dt.dayofyear
    data['Harvest Day of Year'] = data['Harvest Date'].dt.dayofyear

# display all column names after encoding each soil type
print("Column Names in Transformed Crop Management Data:")
for soil_type, data in crop_management_data.items():
    print(f"\n{soil_type} - Column Names After Encoding:")
    print(data.columns.tolist())  # Print all column names

"""# Data Integration"""

# add 'Soil Type' column to each crop management dataset
for soil_type in crop_management_data.keys():
    crop_management_data[soil_type]['Soil Type'] = soil_type

# merge each crop management dataset with soil data
merged_data = {}
for soil_type, management_data in crop_management_data.items():
    # merge on 'Soil Type'
    merged_data[soil_type] = management_data.merge(soil_data, on='Soil Type', how='left')

# check merged data
for soil_type, data in merged_data.items():
    print(f"\nMerged Data for {soil_type} - First Few Rows:")
    print(data.head())

# integrate weather data with each of merged crop management and soil data
for soil_type, data in crop_management_data.items():
    # prepare weather data for merging by renaming 'Month' column
    weather_planting = average_monthly_temp.rename(columns={'Month': 'Month_planting'})
    weather_harvest = average_monthly_temp.rename(columns={'Month': 'Month_harvest'})

    # merge weather data based on 'Planting Month'
    data = pd.merge(data, weather_planting, how='left', left_on='Planting Month', right_on='Month_planting')

    # merge weather data based on 'Harvest Month'
    data = pd.merge(data, weather_harvest, how='left', left_on='Harvest Month', right_on='Month_harvest')

    # merge the extra 'Month' columns after merging
    data.drop(columns=['Month_planting', 'Month_harvest'], inplace=True)

    # update dictionary with merged data
    crop_management_data[soil_type] = data

# check merged data with one soil type
print(crop_management_data['oxisol'].head())

# add 'Variety' column to each okra yield data DataFrame
for variety in okra_varieties:
    okra_yield_data[variety]['Variety'] = variety

# merge data
final_merged_data = {}
for soil_type, data in crop_management_data.items():
    for variety in okra_varieties:
        # extract data for specific crop variety
        data_variety = data[data['Variety'] == variety]

        # extract yield data for specific crop variety
        yield_data_variety = okra_yield_data[variety]

        # merge the data
        final_data_variety = pd.merge(data_variety, yield_data_variety, how='left', on=['Variety'])

        # compile final merged data for soil type
        if soil_type not in final_merged_data:
            final_merged_data[soil_type] = final_data_variety
        else:
            final_merged_data[soil_type] = pd.concat([final_merged_data[soil_type], final_data_variety])

# check merged data with one soil type
print(final_merged_data['tropical black earths'].head())

# concatenate all soil type datasets into one DataFrame
final_merged_data = pd.concat(final_merged_data.values(), ignore_index=True)

# save  integrated dataset to a CSV file
filename = "/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/integrated_okra_data.csv"
final_merged_data.to_csv(filename, index=False)