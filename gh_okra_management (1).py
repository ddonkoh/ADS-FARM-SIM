# -*- coding: utf-8 -*-
"""gh_okra_management.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HPqNeS60u0rNmH4-FEvmmUoqDjmBmt15
"""

from google.colab import drive
import pandas as pd
import numpy as np
import random

# References for crop  management data relations with other factors
# [1] https://www.echocommunity.org/en/resources/f11a5d31-a76c-4851-83c3-06baf3a62c0e
# [2] https://www.frontiersin.org/articles/10.3389/fsufs.2023.1176385/full
# [3] https://climate.ncsu.edu/blog/2014/06/four-weather-factors-for-plant-growth/
# [4] https://www.nature.com/articles/s41598-021-97221-7

drive.mount('/content/drive')

# Load previously generated weather and soil data
weather_data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/Ghana_Weather_Data (1).csv")
soil_data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_soil_data (2).csv")

# Define Okra varieties
okra_varieties = ['Lady’s Finger', 'Quim Bombo', 'Asutem', 'Clemson Spineless', 'Labadi Dwarf', 'Asha', 'Penkrumah', 'Agbagoma', 'Balabi', 'Asontem', 'Sengavi']

# Define Okra varieties and their specific growth durations (in days)
okra_growth_durations = {
    'Lady’s Finger': 60,
    'Quim Bombo': 65,
    'Asutem': 58,
    'Clemson Spineless': 62,
    'Labadi Dwarf': 55,
    'Asha': 60,
    'Penkrumah': 63,
    'Agbagoma': 59,
    'Balabi': 61,
    'Asontem': 64,
    'Sengavi': 57
}

# Functions to determine specific management strategies
def determine_planting_date(weather_data):
    # Choose a date in April for coastal savanna region
    planting_date = random.choice(pd.date_range(start='2023-04-14', end='2023-04-21'))
    return planting_date.strftime('%Y-%m-%d')


def determine_irrigation_schedule(weather_data, soil_row):
    # Example: Adjust irrigation based on average rainfall and soil moisture
    avg_rainfall = weather_data['Average Rainfall (mm)'].mean()
    soil_moisture_content = soil_row['Soil Moisture Content (%)']  # Accessing the value directly
    if avg_rainfall < 50 and soil_moisture_content < 30:
        return 'Weekly'
    else:
        return 'Bi-weekly'


def determine_fertilization_schedule(soil_row):
    # Accessing N, P, K values directly from the soil row
    nitrogen_content = soil_row['Nitrogen (N) Content (%)']
    phosphorus_content = soil_row['Phosphorus (P) Content (%)']
    potassium_content = soil_row['Potassium (K) Content (%)']

    # Example: Adjust fertilization based on soil NPK content
    if nitrogen_content < 0.03 or phosphorus_content < 0.03 or potassium_content < 0.03:
        return '220 kg/ha NPK 15-15-15 at planting, 110-150 kg/ha Sulphate of Ammonia during flowering'
    else:
        return 'Standard NPK application'

def determine_pest_management(weather_data):
    # Example: Adjust pest management based on temperature and humidity
    avg_temp = weather_data['Max Temperature (°C)'].mean()
    avg_humidity = weather_data['Relative Humidity (%)'].mean()
    if avg_temp > 30 or avg_humidity > 85:
        return 'Integrated Pest Management'
    else:
        return 'Regular monitoring and control'

# Function to determine harvest date based on planting date and variety-specific growth duration
def determine_harvest_date(planting_date_str, variety):
    planting_date = pd.to_datetime(planting_date_str)
    growth_duration = okra_growth_durations.get(variety, 60)  # Default to 60 if variety not found
    harvest_date = planting_date + pd.Timedelta(days=growth_duration)
    return harvest_date.strftime('%Y-%m-%d')

# Function to generate crop management data for each soil type
def generate_crop_management_data_for_soil_type(soil_type_data):
    if soil_type_data.empty:
        return pd.DataFrame()  # Return empty DataFrame if no data for soil type

    crop_management_data = []
    for variety in okra_varieties:
        planting_date = determine_planting_date(weather_data)
        irrigation_schedule = determine_irrigation_schedule(weather_data, soil_type_data)
        fertilization_schedule = determine_fertilization_schedule(soil_type_data)
        pest_management = determine_pest_management(weather_data)
        harvest_date = determine_harvest_date(planting_date, variety)

        crop_management_data.append({
            'Variety': variety,
            'Planting Date': planting_date,
            'Irrigation Schedule': irrigation_schedule,
            'Fertilization Schedule': fertilization_schedule,
            'Pest Management': pest_management,
            'Harvest Date': harvest_date
        })

    return pd.DataFrame(crop_management_data)

# Generate and save crop management data for each soil type
with pd.ExcelWriter('/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_okra_crop_management_data.xlsx') as writer:
    for soil_type in soil_data['Soil Type'].unique():
        filtered_soil_data = soil_data[soil_data['Soil Type'] == soil_type]
        if not filtered_soil_data.empty:
            soil_type_data = filtered_soil_data.iloc[0]
            df = generate_crop_management_data_for_soil_type(soil_type_data)
            if not df.empty:
                df.to_excel(writer, sheet_name=soil_type, index=False)

print("Crop management data generation complete.")