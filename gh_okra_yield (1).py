# -*- coding: utf-8 -*-
"""gh_okra_yield.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kVQYgiuBHgf10Lt7kXf58b588xhJqQB-
"""

from google.colab import drive
import pandas as pd
import numpy as np
import random


# References for soil data
# [1] https://www.frontiersin.org/articles/10.3389/fsufs.2020.00052/full
# [2] https://www.nature.com/articles/s41598-021-97221-7


drive.mount('/content/drive')

# Load previously generated weather and soil data
weather_data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/Ghana_Weather_Data (1).csv")
soil_data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_soil_data (2).csv")
crop_management_data = {}
with pd.ExcelFile('/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_okra_crop_management_data.xlsx') as xls:
    for sheet_name in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name)
        crop_management_data[sheet_name] = df
        print(f"Loaded data for soil type: {sheet_name}, shape: {df.shape}")  # Check the shape of each loaded DataFrame

# Print keys of crop_management_data
print("Keys in crop_management_data:", crop_management_data.keys())

# Print a sample DataFrame for a specific soil type

sample_soil_type = 'tropical black earths'
if sample_soil_type in crop_management_data:
    print(f"Sample data for soil type {sample_soil_type}:")
    print(crop_management_data[sample_soil_type].head())  # Print first few rows
else:
    print(f"No data found for soil type {sample_soil_type}")

print(weather_data.columns)  # Add this line to check column name

# Define Okra varieties and growth stages
okra_varieties = ['Lady’s Finger', 'Quim Bombo', 'Asutem', 'Clemson Spineless', 'Labadi Dwarf', 'Asha', 'Penkrumah', 'Agbagoma', 'Balabi', 'Asontem', 'Sengavi']
growth_stages = ['Germination', 'Vegetative', 'Flowering', 'Fruiting', 'Maturity']

# Define the growth stages and their durations
growth_stages = {
    'Germination': 1,
    'Vegetative': 2,
    'Flowering': 2,
    'Fruiting': 3,
    'Maturity': 1
}

# Function to assign growth stages to dates
def assign_growth_stages_to_dates(planting_date, variety):
    stage_date_mapping = []
    current_date = planting_date
    for stage, duration in growth_stages.items():
        for _ in range(duration):
            stage_date_mapping.append({
                'Growth Stage': stage,
                'Date': current_date
            })
            current_date += pd.Timedelta(days=1)  # Increment by one day
    return pd.DataFrame(stage_date_mapping)


# Generate the DataFrame for growth stages and months
# growth_stage_month_df = assign_growth_stages_to_dates()


# # Function to calculate yield based on weather and soil data
# def calculate_yield(temperature, rainfall, soil_type):
#     # Example calculation: Adjust as needed based on actual relationships
#     yield_reduction = 0
#     if temperature > 30:
#         yield_reduction += 0.1  # High temperature reduces yield
#     if rainfall < 50:
#         yield_reduction += 0.1  # Low rainfall reduces yield
#     if soil_type == 'Sandy':
#         yield_reduction += 0.05  # Sandy soil reduces yield
#     return max(0, 10000 - (yield_reduction * 10000))  # Base yield minus reduction

def calculate_yield(temperature, rainfall, soil_type, variety):
    # Define optimal temperature and rainfall for each variety
    optimal_conditions = {
        'Lady’s Finger': {'temp': 25, 'rainfall': 60},
        'Quim Bombo': {'temp': 27, 'rainfall': 55},
        'Asutem': {'temp': 26, 'rainfall': 50},
        'Clemson Spineless': {'temp': 24, 'rainfall': 65},
        'Labadi Dwarf': {'temp': 23, 'rainfall': 70},
        'Asha': {'temp': 28, 'rainfall': 60},
        'Penkrumah': {'temp': 25, 'rainfall': 55},
        'Agbagoma': {'temp': 26, 'rainfall': 60},
        'Balabi': {'temp': 27, 'rainfall': 65},
        'Asontem': {'temp': 24, 'rainfall': 50},
        'Sengavi': {'temp': 25, 'rainfall': 60}
    }

    # Soil type yield reduction factors
    soil_yield_reduction = {
        'tropical black earths': 0.02,
        'tropical gray earths': 0.03,
        'acid vleisols': 0.04,
        'sodium vleisols': 0.05,
        'lateritic soils': 0.03,
        'ochrosols': 0.02,
        'oxisol': 0.01,
        'Akuse clay': 0.04
    }

    optimal_temp = optimal_conditions[variety]['temp']
    optimal_rainfall = optimal_conditions[variety]['rainfall']

    temp_diff = abs(temperature - optimal_temp)
    rainfall_diff = abs(rainfall - optimal_rainfall)

    yield_reduction = temp_diff * 0.05 + rainfall_diff * 0.03
    yield_reduction += soil_yield_reduction.get(soil_type, 0.02)  # Default reduction if soil type not found

    return max(0, 10000 - (yield_reduction * 10000))


# # Additional functions for other calculations
# def calculate_lai(temperature, solar_radiation):
#     # Example calculation
#     return min(6, max(1, temperature / 10 + solar_radiation / 5))

def calculate_lai(temperature, solar_radiation, growth_stage, variety, soil_type):
    # Stage, variety, and soil factors for LAI
    stage_factor = {
        'Germination': 0.2,
        'Vegetative': 0.5,
        'Flowering': 0.7,
        'Fruiting': 0.9,
        'Maturity': 0.3
    }
    variety_factor = {
        'Lady’s Finger': 1.0,
        'Quim Bombo': 0.9,
        'Asutem': 0.95,
        'Clemson Spineless': 1.05,
        'Labadi Dwarf': 0.9,
        'Asha': 1.1,
        'Penkrumah': 0.85,
        'Agbagoma': 0.95,
        'Balabi': 1.0,
        'Asontem': 0.9,
        'Sengavi': 1.05
    }
    soil_factor = {
        'tropical black earths': 1.1,
        'tropical gray earths': 1.0,
        'acid vleisols': 0.9,
        'sodium vleisols': 0.95,
        'lateritic soils': 1.05,
        'ochrosols': 1.0,
        'oxisol': 1.1,
        'Akuse clay': 0.9
    }

    lai_base = temperature / 10 + solar_radiation / 5
    lai_adjusted = lai_base * stage_factor[growth_stage] * variety_factor.get(variety, 1.0) * soil_factor.get(soil_type, 1.0)

    return min(6, max(1, lai_adjusted))


# def calculate_crop_water_use(rainfall, temperature):
#     # # Example calculation
#     # return max(0, 500 + temperature * 10 - rainfall)

def calculate_crop_water_use(rainfall, temperature, soil_type):
    # Example: Different soil types affect water use
    soil_factor = {
        'tropical black earths': 1.0,
        'tropical gray earths': 0.9,
        'acid vleisols': 1.1,
        'sodium vleisols': 0.8,
        'lateritic soils': 0.9,
        'ochrosols': 1.0,
        'oxisol': 1.2,
        'Akuse clay': 1.3
    }

    water_use = 500 + temperature * 10 - rainfall
    adjusted_water_use = water_use * soil_factor.get(soil_type, 1.0)  # Default factor if soil type not found

    return max(0, adjusted_water_use)



# def calculate_nutrient_uptake(n_content, p_content, k_content):
#     # Example calculation
#     return {'N': n_content * 100, 'P': p_content * 100, 'K': k_content * 100}

def calculate_nutrient_uptake(n_content, p_content, k_content, growth_stage):
    # Example: Nutrient uptake varies with growth stages
    stage_multiplier = {
        'Germination': 0.5,
        'Vegetative': 1.0,
        'Flowering': 1.2,
        'Fruiting': 1.5,
        'Maturity': 0.8
    }

    multiplier = stage_multiplier[growth_stage]
    return {
        'N': n_content * 100 * multiplier,
        'P': p_content * 100 * multiplier,
        'K': k_content * 100 * multiplier
    }


# def calculate_pest_disease_incidence(temperature, humidity):
#     # Example calculation
#     return 'Low' if temperature < 30 and humidity < 85 else 'Moderate'

def calculate_pest_disease_incidence(temperature, humidity, variety):
    # Example: Varieties have different resistances
    resistance_factor = {
        'Lady’s Finger': 0.8,
        'Quim Bombo': 0.9,
        'Asutem': 0.85,
        'Clemson Spineless': 0.75,
        'Labadi Dwarf': 0.8,
        'Asha': 0.9,
        'Penkrumah': 0.85,
        'Agbagoma': 0.8,
        'Balabi': 0.9,
        'Asontem': 0.85,
        'Sengavi': 0.8
    }

    incidence = 'Low' if temperature < 30 and humidity < 85 else 'Moderate'
    if resistance_factor[variety] < 0.85:
        incidence = 'High' if temperature > 28 else incidence

    return incidence



# def calculate_soil_moisture_content(rainfall, evapotranspiration):
#     # Example calculation
#     return max(0, min(100, rainfall - evapotranspiration))

def calculate_soil_moisture_content(rainfall, evapotranspiration, soil_type):
    # Example: Soil types affect moisture retention
    retention_factor = {
        'tropical black earths': 1.0,
        'tropical gray earths': 0.9,
        'acid vleisols': 1.1,
        'sodium vleisols': 0.8,
        'lateritic soils': 0.9,
        'ochrosols': 1.0,
        'oxisol': 1.2,
        'Akuse clay': 1.3
    }

    moisture_content = rainfall - evapotranspiration
    adjusted_moisture = moisture_content * retention_factor.get(soil_type, 1.0)  # Default factor if soil type not found

    return max(0, min(100, adjusted_moisture))



# def calculate_weather_data_correlation(temperature, rainfall):
#     # Example calculation
#     return 'High' if temperature > 25 and rainfall > 50 else 'Low'

def calculate_weather_data_correlation(temperature, rainfall, optimal_temp, optimal_rainfall):
  # Define optimal temperature and rainfall for each variety
    optimal_conditions = {
        'Lady’s Finger': {'temp': 25, 'rainfall': 60},
        'Quim Bombo': {'temp': 27, 'rainfall': 55},
        'Asutem': {'temp': 26, 'rainfall': 50},
        'Clemson Spineless': {'temp': 24, 'rainfall': 65},
        'Labadi Dwarf': {'temp': 23, 'rainfall': 70},
        'Asha': {'temp': 28, 'rainfall': 60},
        'Penkrumah': {'temp': 25, 'rainfall': 55},
        'Agbagoma': {'temp': 26, 'rainfall': 60},
        'Balabi': {'temp': 27, 'rainfall': 65},
        'Asontem': {'temp': 24, 'rainfall': 50},
        'Sengavi': {'temp': 25, 'rainfall': 60}
    }

    optimal_temp = optimal_conditions[variety]['temp']
    optimal_rainfall = optimal_conditions[variety]['rainfall']

    # Calculate the deviation from optimal conditions
    temp_deviation = abs(temperature - optimal_temp)
    rainfall_deviation = abs(rainfall - optimal_rainfall)

    # Define thresholds for high correlation
    temp_threshold = 5  # degrees Celsius
    rainfall_threshold = 20  # mm

    if temp_deviation <= temp_threshold and rainfall_deviation <= rainfall_threshold:
        return 'High'
    else:
        return 'Low'

def generate_crop_growth_yield_data_for_soil_type(soil_type, variety):
    crop_growth_yield_data = {}
     # Define optimal temperature and rainfall for each variety
    optimal_conditions = {
        'Lady’s Finger': {'temp': 25, 'rainfall': 60},
        'Quim Bombo': {'temp': 27, 'rainfall': 55},
        'Asutem': {'temp': 26, 'rainfall': 50},
        'Clemson Spineless': {'temp': 24, 'rainfall': 65},
        'Labadi Dwarf': {'temp': 23, 'rainfall': 70},
        'Asha': {'temp': 28, 'rainfall': 60},
        'Penkrumah': {'temp': 25, 'rainfall': 55},
        'Agbagoma': {'temp': 26, 'rainfall': 60},
        'Balabi': {'temp': 27, 'rainfall': 65},
        'Asontem': {'temp': 24, 'rainfall': 50},
        'Sengavi': {'temp': 25, 'rainfall': 60}
    }
    print(f"Processing soil type: {soil_type}")

    try:
        management_df = crop_management_data[soil_type][crop_management_data[soil_type]['Variety'] == variety]

        if management_df.empty:
            print(f"Error processing variety {variety} in soil type {soil_type}: No data found")
            return None

        planting_date = pd.to_datetime(management_df['Planting Date'].iloc[0])
        harvest_date = pd.to_datetime(management_df['Harvest Date'].iloc[0])

        stage_date_df = assign_growth_stages_to_dates(planting_date, variety)

        variety_data = []
        for _, row in stage_date_df.iterrows():
            stage = row['Growth Stage']
            date = row['Date']
            if date <= harvest_date:
                # Convert numeric month to month name

                month_name = date.strftime("%B")

                # Filter using the month name
                weather_rows = weather_data[weather_data['Month'] == month_name]
                if weather_rows.empty:
                    print(f"No weather data found for month {month_name}")
                    continue
                weather_row = weather_rows.iloc[0]

                soil_rows = soil_data[soil_data['Soil Type'] == soil_type]
                if soil_rows.empty:
                    print(f"No soil data found for soil type {soil_type}")
                    continue
                soil_row = soil_rows.sample().iloc[0]

                 # Updated function call with new arguments
                lai = calculate_lai(weather_row['Max Temperature (°C)'],
                            weather_row['Solar Radiation (MJ/m²-day)'],
                            stage, variety, soil_type)
                # Calculate and append data for each growth stage
                variety_data.append({
                    'Growth Stage': stage,
                    'Date': date.strftime('%Y-%m-%d'),
                    'Yield (kg/ha)': calculate_yield(weather_row['Max Temperature (°C)'], weather_row['Average Rainfall (mm)'], soil_row['Soil Type'], variety),
                    'Leaf Area Index (LAI)': lai,
                    'Crop Water Use (mm/day)': calculate_crop_water_use(weather_row['Average Rainfall (mm)'], weather_row['Max Temperature (°C)'], soil_type),
                    'Nutrient Uptake': calculate_nutrient_uptake(soil_row['Nitrogen (N) Content (%)'], soil_row['Phosphorus (P) Content (%)'], soil_row['Potassium (K) Content (%)'], stage),
                    'Pest/Disease Incidence': calculate_pest_disease_incidence(weather_row['Max Temperature (°C)'], weather_row['Relative Humidity (%)'], variety),
                    'Soil Moisture Content': calculate_soil_moisture_content(weather_row['Average Rainfall (mm)'], weather_row['Max Temperature (°C)'], soil_type),
                    'Weather Data Correlation': calculate_weather_data_correlation(weather_row['Max Temperature (°C)'], weather_row['Average Rainfall (mm)'], optimal_conditions[variety]['temp'], optimal_conditions[variety]['rainfall'])
                })

        crop_growth_yield_data[variety] = pd.DataFrame(variety_data)

    except Exception as e:
        print(f"Error processing variety {variety} in soil type {soil_type}: {e}")
        return None

    return pd.DataFrame(variety_data)

# Check if there is data for April in weather_data
april_weather_data = weather_data[weather_data['Month'] == 4]
print("Data for April in weather_data:")
print(april_weather_data)

# Loop through each variety
for variety in okra_varieties:
    with pd.ExcelWriter(f'/content/drive/My Drive/Colab Notebooks/ADS PROJECT/SIM DATA/ghana_okra_{variety}_data.xlsx') as writer:
        # Loop through each soil type for the current variety
        for soil_type in unique_soil_types:
            df = generate_crop_growth_yield_data_for_soil_type(soil_type, variety)
            if df is not None and not df.empty:  # Check if DataFrame is not empty
                df.to_excel(writer, sheet_name=soil_type, index=False)
                print(f"Writing data for soil type: {soil_type} in variety: {variety}")
            else:
                print(f"No data to write for soil type: {soil_type} in variety: {variety}")

print("Data generation for all varieties and soil types complete.")